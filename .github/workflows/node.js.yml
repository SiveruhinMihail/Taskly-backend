name: Node.js CI with Environment

on:
  push:
    branches: [ "main", "develop", "release", "templates" ]
  pull_request:
    branches: [ "main", "develop", "release", "templates" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Create .env file
        run: |
          cat << EOF > .env
          # MongoDB Configuration
          MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_USER }}
          MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_PASSWORD }}
          MONGO_DATABASE=${{ secrets.MONGO_DATABASE }}
          MONGO_PORT=${{ secrets.MONGO_PORT }}
          
          # App Configuration
          NODE_ENV=test
          JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          PORT=3000
          EOF

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Force install dependencies
        run: npm i --force

      - name: Run Docker Compose
        run: |
          docker-compose up -d --build
          # Явно ждём готовности приложения
          timeout 300 bash -c 'while [[ "$(docker-compose exec -T app curl -s -o /dev/null -w "%{http_code}" http://localhost:${PORT}/health)" != "200" ]]; do sleep 5; echo "Waiting for app to start..."; done' || exit 1
          echo "All services are up and healthy"

      - name: Run ESLint tests
        run: npx eslint .
      
      - name: Run tests
        run: npm test
